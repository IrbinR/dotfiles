# ╔══════════════════════════════════════════════════════════╗
# ║                          Fonts                           ║
# ╚══════════════════════════════════════════════════════════╝

#: kitty tiene una gestión de fuentes muy potente. Puede configurar
#: fuentes individuales e incluso especificar fuentes especiales para determinados
#: caracteres.

font_family        MonaspiceRn NFM
bold_font        auto
italic_font      auto
bold_italic_font auto

#: Puedes especificar diferentes fuentes para las negritas/itálicas/ negritas-itálicas
#: variantes. La forma más fácil de seleccionar fuentes es ejecutar el comando `kitten
#: choose-fonts` comando que presentara una interfaz de usuario agradable para que usted
#: seleccionar las fuentes que quieras con vistas previas y soporte para seleccionar
#: fuentes variables y características de fuentes. Si quieres aprender a seleccionar
#: fuentes manualmente, lea la sintaxis de especificación de fuentes
#: <https://sw.kovidgoyal.net/kitty/kittens/choose-fonts/#font-spec-syntax>.

# font_size 11.0

#: Font size (in pts).

# force_ltr no

#: kitty no soporta BIDI (texto bidireccional), sin embargo, para RTL
#: las palabras se muestran automáticamente en RTL. Es decir
#: en un script RTL, las palabras "HELLO WORLD" se muestran en kitty como
#: "HOLA MUNDO", y si intentas seleccionar una subcadena de una cadena con forma #: RTL, obtendrás un error.
#: cadena con forma RTL, obtendrá el carácter que estaría allí si #: la cadena hubiera sido LTR.
#: la cadena hubiera sido LTR. Por ejemplo, suponiendo la palabra hebrea ירושלים,
#: selecciona el carácter que en pantalla aparece como ם en realidad
#: escribe en el búfer de selección el carácter י. el comportamiento por defecto de kitty
#: es útil junto con un filtro para invertir el orden de las palabras.
#: orden, sin embargo, si desea manipular glifos RTL, puede ser
#: muy difícil trabajar con él, por lo que esta opción se proporciona para desactivarlo.
#: desactivarla. Además, esta opción se puede utilizar con la línea de comandos
#: programa GNU FriBidi <https://github.com/fribidi/fribidi#executable>
#: para obtener soporte BIDI, porque forzará a kitty a tratar siempre
#: el texto como LTR, que FriBidi espera para terminales.


# symbol_map

#: E.g. symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

#: Asigna los puntos de código Unicode especificados a una fuente concreta. Útil
#: si necesita una representación especial para algunos símbolos, como para
#: Powerline. Evita la necesidad de fuentes parcheadas. Cada punto de código Unicode
#: se especifica en la forma `U+<punto de código en hexadecimal>`. Puede
#: puede especificar múltiples puntos de código, separados por comas y rangos
#: separados por guiones. Esta opción puede especificarse varias veces.
#: La sintaxis es::

#:     symbol_map codepoints Font Family Name

# narrow_symbols

#: E.g. narrow_symbols U+E0A0-U+E0A3,U+E0C0-U+E0C7 1

#: Normalmente, para los caracteres Unicode de uso privado y algunos símbolos/dingbat
#: caracteres, si el carácter es seguido por uno o más espacios,
#: kitty usará esas celdas extra para agrandar el caracter, si
#: el carácter en la fuente tiene una relación de aspecto amplia. Usando esta
#: opción puede forzar a kitty a restringir los puntos de código especificados a
#: renderizar en el número de celdas especificado (por defecto una celda).
#: Esta opcion puede ser especificada multiples veces. La sintaxis es::

#:     narrow_symbols codepoints [optionally the number of cells]

# disable_ligatures never

#: Elige cómo quieres manejar las ligaduras de varios caracteres. En
#: por defecto es mostrarlas siempre. Puede decirle a kitty que no las renderice
#: cuando el cursor esta sobre ellas usando cursor para hacer la edicion
#: más fácil, o hacer que kitty nunca las renderice usando always, si
#: no te gustan. La estrategia de ligadura puede ser establecida por ventana
#: ya sea usando el control remoto de kitty o definiendo
#: atajos en kitty.conf, por ejemplo::

#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

#: Tenga en cuenta que esto se refiere a la programación de ligaduras, típicamente
#: implementadas mediante la función calt OpenType. Para deshabilitar ligaduras #: generales
#: generales, use la opción font_features.

# font_features

#: E.g. font_features none
# NOTE: Kitty fonts

#: Choose exactly which OpenType features to enable or disable. Note
#: that for the main fonts, features can be specified when selecting
#: the font using the choose-fonts kitten. This setting is useful for
#: fallback fonts.

#: Some fonts might have features worthwhile in a terminal. For
#: example, Fira Code includes a discretionary feature, zero, which in
#: that font changes the appearance of the zero (0), to make it more
#: easily distinguishable from Ø. Fira Code also includes other
#: discretionary features known as Stylistic Sets which have the tags
#: ss01 through ss20.

#: For the exact syntax to use for individual features, see the
#: HarfBuzz documentation <https://harfbuzz.github.io/harfbuzz-hb-
#: common.html#hb-feature-from-string>.

#: Note that this code is indexed by PostScript name, and not the font
#: family. This allows you to define very precise feature settings;
#: e.g. you can disable a feature in the italic font but not in the
#: regular font.

#: On Linux, font features are first read from the FontConfig database
#: and then this option is applied, so they can be configured in a
#: single, central place.

#: To get the PostScript name for a font, use the `fc-scan file.ttf`
#: command on Linux or the `Font Book tool on macOS
#: <https://apple.stackexchange.com/questions/79875/how-can-i-get-the-
#: postscript-name-of-a-ttf-font-installed-in-os-x>`__.

#: Enable alternate zero and oldstyle numerals::

#:     font_features FiraCode-Retina +zero +onum

#: Enable only alternate zero in the bold font::

#:     font_features FiraCode-Bold +zero

#: Disable the normal ligatures, but keep the calt feature which (in
#: this font) breaks up monotony::

#:     font_features TT2020StyleB-Regular -liga +calt

#: In conjunction with force_ltr, you may want to disable Arabic
#: shaping entirely, and only look at their isolated forms if they
#: show up in a document. You can do this with e.g.::

#:     font_features UnifontMedium +isol -medi -fina -init

# modify_font

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::

#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px

#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::

#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3

#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

# box_drawing_scale 0.001, 1, 1.5, 2

#: The sizes of the lines used for the box drawing Unicode characters.
#: These values are in pts. They will be scaled by the monitor DPI to
#: arrive at a pixel value. There must be four values corresponding to
#: thin, normal, thick, and very thick lines.

# undercurl_style thin-sparse

#: The style with which undercurls are rendered. This option takes the
#: form (thin|thick)-(sparse|dense). Thin and thick control the
#: thickness of the undercurl. Sparse and dense control how often the
#: curl oscillates. With sparse the curl will peak once per character,
#: with dense twice. Changing this option dynamically via reloading
#: the config or remote control is undefined.

# underline_exclusion 1

#: By default kitty renders gaps in underlines when they overlap with
#: descenders (the parts of letters below the baseline, such as for y,
#: q, p etc.). This option controls the thickness of the gaps. It can
#: be either a unitless number in which case it is a fraction of the
#: underline thickness as specified in the font or it can have a
#: suffix of px for pixels or pt for points. Set to zero to disable
#: the gaps. Changing this option dynamically via reloading the config
#: or remote control is undefined.

# text_composition_strategy platform

#: Control how kitty composites text glyphs onto the background color.
#: The default value of platform tries for text rendering as close to
#: "native" for the platform kitty is running on as possible.

#: A value of legacy uses the old (pre kitty 0.28) strategy for how
#: glyphs are composited. This will make dark text on light
#: backgrounds look thicker and light text on dark backgrounds
#: thinner. It might also make some text appear like the strokes are
#: uneven.

#: You can fine tune the actual contrast curve used for glyph
#: composition by specifying up to two space-separated numbers for
#: this setting.

#: The first number is the gamma adjustment, which controls the
#: thickness of dark text on light backgrounds. Increasing the value
#: will make text appear thicker. The default value for this is 1.0 on
#: Linux and 1.7 on macOS. Valid values are 0.01 and above. The result
#: is scaled based on the luminance difference between the background
#: and the foreground. Dark text on light backgrounds receives the
#: full impact of the curve while light text on dark backgrounds is
#: affected very little.

#: The second number is an additional multiplicative contrast. It is
#: percentage ranging from 0 to 100. The default value is 0 on Linux
#: and 30 on macOS.

#: If you wish to achieve similar looking thickness in light and dark
#: themes, a good way to experiment is start by setting the value to
#: 1.0 0 and use a dark theme. Then adjust the second parameter until
#: it looks good. Then switch to a light theme and adjust the first
#: parameter until the perceived thickness matches the dark theme.

# text_fg_override_threshold 0

#: A setting to prevent low contrast between foreground and background
#: colors. Useful when working with applications that use colors that
#: do not contrast well with your preferred color scheme. The default
#: value is 0, which means no color overriding is performed. There are
#: two modes of operation:

#: A value with the suffix ratio represents the minimum accepted
#: contrast ratio between the foreground and background color.
#: Possible values range from 0.0 ratio to 21.0 ratio. For example, to
#: meet WCAG level AA
#: <https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines>
#: a value of 4.5 ratio can be provided. The algorithm is implemented
#: using HSLuv <https://www.hsluv.org/> which enables it to change the
#: perceived lightness of a color just as much as needed without
#: really changing its hue and saturation.

#: A value with the suffix % represents the minimum accepted
#: difference in luminance between the foreground and background
#: color, below which kitty will override the foreground color. It is
#: percentage ranging from 0 % to 100 %. If the difference in
#: luminance of the foreground and background is below this threshold,
#: the foreground color will be set to white if the background is dark
#: or black if the background is light.

#: WARNING: Some programs use characters (such as block characters)
#: for graphics display and may expect to be able to set the
#: foreground and background to the same color (or similar colors). If
#: you see unexpected stripes, dots, lines, incorrect color, no color
#: where you expect color, or any kind of graphic display problem try
#: setting text_fg_override_threshold to 0 to see if this is the cause
#: of the problem or consider using the ratio mode of operation
#: described above instead of the % mode of operation.

